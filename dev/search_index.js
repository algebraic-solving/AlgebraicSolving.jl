var documenterSearchIndex = {"docs":
[{"location":"groebner-bases/","page":"Algorithms","title":"Algorithms","text":"CurrentModule = AlgebraicSolving","category":"page"},{"location":"groebner-bases/#Gröbner-bases","page":"Algorithms","title":"Gröbner bases","text":"","category":"section"},{"location":"groebner-bases/#Introduction","page":"Algorithms","title":"Introduction","text":"","category":"section"},{"location":"groebner-bases/","page":"Algorithms","title":"Algorithms","text":"AbstractAlgebra allows to compute Gröbner bases for input generators over finite fields of characteristic smaller 2^31.","category":"page"},{"location":"groebner-bases/","page":"Algorithms","title":"Algorithms","text":"At the moment different variants of Faugère's F4 Algorithm are implemented.","category":"page"},{"location":"groebner-bases/#Functionality","page":"Algorithms","title":"Functionality","text":"","category":"section"},{"location":"groebner-bases/","page":"Algorithms","title":"Algorithms","text":"    groebner_basis(\n        F::Vector{T} where T <: MPolyElem;\n        initial_hts::Int=17,\n        nr_thrds::Int=1,\n        max_nr_pairs::Int=0,\n        la_option::Int=2,\n        eliminate::Int=0,\n        complete_reduction::Bool=true,\n        info_level::Int=0\n        )","category":"page"},{"location":"groebner-bases/#AlgebraicSolving.groebner_basis-Tuple{Vector{T} where T<:MPolyElem}","page":"Algorithms","title":"AlgebraicSolving.groebner_basis","text":"groebner_basis(F::Vector{T} where T <: MPolyElem, <keyword arguments>)\n\nCompute a Groebner basis of the given ideal I w.r.t. to the degree reverse lexicographical monomial ordering using Faugère's F4 algorithm. At the moment the underlying algorithm is based on variants of Faugère's F4 Algorithm.\n\nNote: At the moment only ground fields of characteristic p, p prime, p < 2^{31} are supported.\n\nArguments\n\nF::Vector{T} where T <: MPolyElem: input generators.\ninitial_hts::Int=17: initial hash table size log_2.\nnr_thrds::Int=1: number of threads for parallel linear algebra.\nmax_nr_pairs::Int=0: maximal number of pairs per matrix, only bounded by minimal degree if 0.\nla_option::Int=2: linear algebra option: exact sparse-dense (1), exact sparse (2, default), probabilistic sparse-dense (42), probabilistic sparse(44).\neliminate::Int=0: size of first block of variables to be eliminated.\ncomplete_reduction::Bool=true: compute a reduced Gröbner basis for I\ninfo_level::Int=0: info level printout: off (0, default), summary (1), detailed (2).\n\nExamples\n\njulia> using AlgebraicSolving\n\njulia> R, (x,y,z) = PolynomialRing(GF(101),[\"x\",\"y\",\"z\"], ordering=:degrevlex)\n(Multivariate Polynomial Ring in x, y, z over Finite field F_101, AbstractAlgebra.Generic.MPoly{AbstractAlgebra.GFElem{Int64}}[x, y, z])\n\njulia> F = [x+2*y+2*z-1, x^2+2*y^2+2*z^2-x, 2*x*y+2*y*z-y]\n3-element Vector{AbstractAlgebra.Generic.MPoly{AbstractAlgebra.GFElem{Int64}}}:\n x + 2*y + 2*z + 100\n x^2 + 2*y^2 + 2*z^2 + 100*x\n 2*x*y + 2*y*z + 100*y\n\njulia> groebner_basis(F)\n4-element Vector{AbstractAlgebra.MPolyElem}:\n x + 2*y + 2*z + 100\n y*z + 82*z^2 + 10*y + 40*z\n y^2 + 60*z^2 + 20*y + 81*z\n z^3 + 28*z^2 + 64*y + 13*z\n\njulia> groebner_basis(F, eliminate=2)\n1-element Vector{AbstractAlgebra.MPolyElem}:\n z^4 + 38*z^3 + 95*z^2 + 95*z\n\n\n\n","category":"method"},{"location":"#Getting-Started","page":"Introduction","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"AlgebraicSolving is a computer algebra package for the Julia programming  language, maintained by Christian Eder and Mohab Safey El Din.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"https://github.com/algebraic-solving/AlgebraicSolving.jl (Source code)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The features of AlgebraicSolving so far includes algorthms for computing Gröbner bases over finite fields and for computing real solutions.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"To use Nemo we require Julia 1.6 or higher. Please see https://julialang.org/downloads/ for instructions on how to obtain julia for your system.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"At the Julia prompt simply type","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> using Pkg; Pkg.add(\"AlgebraicSolving\")","category":"page"},{"location":"#Quick-start","page":"Introduction","title":"Quick start","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Here are some examples of using AlgebraicSolving....","category":"page"}]
}
